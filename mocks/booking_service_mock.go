// Code generated by MockGen. DO NOT EDIT.
// Source: glamour_reserve/features/services (interfaces: BookingServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	core "glamour_reserve/entity/core"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookingServiceInterface is a mock of BookingServiceInterface interface.
type MockBookingServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBookingServiceInterfaceMockRecorder
}

// MockBookingServiceInterfaceMockRecorder is the mock recorder for MockBookingServiceInterface.
type MockBookingServiceInterfaceMockRecorder struct {
	mock *MockBookingServiceInterface
}

// NewMockBookingServiceInterface creates a new mock instance.
func NewMockBookingServiceInterface(ctrl *gomock.Controller) *MockBookingServiceInterface {
	mock := &MockBookingServiceInterface{ctrl: ctrl}
	mock.recorder = &MockBookingServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingServiceInterface) EXPECT() *MockBookingServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookingServiceInterface) Create(arg0 core.BookingCore, arg1 string) (core.BookingCore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(core.BookingCore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBookingServiceInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookingServiceInterface)(nil).Create), arg0, arg1)
}

// FindAllBookings mocks base method.
func (m *MockBookingServiceInterface) FindAllBookings(arg0 string) ([]core.BookingAll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBookings", arg0)
	ret0, _ := ret[0].([]core.BookingAll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllBookings indicates an expected call of FindAllBookings.
func (mr *MockBookingServiceInterfaceMockRecorder) FindAllBookings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBookings", reflect.TypeOf((*MockBookingServiceInterface)(nil).FindAllBookings), arg0)
}

// FindBookingByID mocks base method.
func (m *MockBookingServiceInterface) FindBookingByID(arg0 string) (core.BookingCore, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookingByID", arg0)
	ret0, _ := ret[0].(core.BookingCore)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindBookingByID indicates an expected call of FindBookingByID.
func (mr *MockBookingServiceInterfaceMockRecorder) FindBookingByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookingByID", reflect.TypeOf((*MockBookingServiceInterface)(nil).FindBookingByID), arg0)
}

// FindServiceByID mocks base method.
func (m *MockBookingServiceInterface) FindServiceByID(arg0 string) (core.ServiceCore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindServiceByID", arg0)
	ret0, _ := ret[0].(core.ServiceCore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServiceByID indicates an expected call of FindServiceByID.
func (mr *MockBookingServiceInterfaceMockRecorder) FindServiceByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceByID", reflect.TypeOf((*MockBookingServiceInterface)(nil).FindServiceByID), arg0)
}

// GetAllHistories mocks base method.
func (m *MockBookingServiceInterface) GetAllHistories(arg0 string) ([]core.BookingCore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHistories", arg0)
	ret0, _ := ret[0].([]core.BookingCore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHistories indicates an expected call of GetAllHistories.
func (mr *MockBookingServiceInterfaceMockRecorder) GetAllHistories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHistories", reflect.TypeOf((*MockBookingServiceInterface)(nil).GetAllHistories), arg0)
}

// GetSpecificHistory mocks base method.
func (m *MockBookingServiceInterface) GetSpecificHistory(arg0, arg1 string) (core.BookingCore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecificHistory", arg0, arg1)
	ret0, _ := ret[0].(core.BookingCore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecificHistory indicates an expected call of GetSpecificHistory.
func (mr *MockBookingServiceInterfaceMockRecorder) GetSpecificHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecificHistory", reflect.TypeOf((*MockBookingServiceInterface)(nil).GetSpecificHistory), arg0, arg1)
}

// UpdateStatusBooking mocks base method.
func (m *MockBookingServiceInterface) UpdateStatusBooking(arg0 core.BookingCore) (core.BookingCore, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusBooking", arg0)
	ret0, _ := ret[0].(core.BookingCore)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateStatusBooking indicates an expected call of UpdateStatusBooking.
func (mr *MockBookingServiceInterfaceMockRecorder) UpdateStatusBooking(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusBooking", reflect.TypeOf((*MockBookingServiceInterface)(nil).UpdateStatusBooking), arg0)
}

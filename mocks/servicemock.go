// Code generated by MockGen. DO NOT EDIT.
// Source: glamour_reserve/features/services (interfaces: SvcServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	core "glamour_reserve/entity/core"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSvcServiceInterface is a mock of SvcServiceInterface interface.
type MockSvcServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSvcServiceInterfaceMockRecorder
}

// MockSvcServiceInterfaceMockRecorder is the mock recorder for MockSvcServiceInterface.
type MockSvcServiceInterfaceMockRecorder struct {
	mock *MockSvcServiceInterface
}

// NewMockSvcServiceInterface creates a new mock instance.
func NewMockSvcServiceInterface(ctrl *gomock.Controller) *MockSvcServiceInterface {
	mock := &MockSvcServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSvcServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSvcServiceInterface) EXPECT() *MockSvcServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateService mocks base method.
func (m *MockSvcServiceInterface) CreateService(arg0 core.ServiceCore) (core.ServiceCore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].(core.ServiceCore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockSvcServiceInterfaceMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockSvcServiceInterface)(nil).CreateService), arg0)
}

// Delete mocks base method.
func (m *MockSvcServiceInterface) Delete(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSvcServiceInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSvcServiceInterface)(nil).Delete), arg0)
}

// FindAll mocks base method.
func (m *MockSvcServiceInterface) FindAll(arg0, arg1, arg2 string) ([]core.ServiceCore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]core.ServiceCore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockSvcServiceInterfaceMockRecorder) FindAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockSvcServiceInterface)(nil).FindAll), arg0, arg1, arg2)
}

// FindById mocks base method.
func (m *MockSvcServiceInterface) FindById(arg0 string) (core.ServiceCore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(core.ServiceCore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockSvcServiceInterfaceMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockSvcServiceInterface)(nil).FindById), arg0)
}

// Update mocks base method.
func (m *MockSvcServiceInterface) Update(arg0 string, arg1 core.ServiceCore) (core.ServiceCore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(core.ServiceCore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSvcServiceInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSvcServiceInterface)(nil).Update), arg0, arg1)
}
